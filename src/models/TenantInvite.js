const mongoose = require("mongoose");

const TenantInviteSchema = new mongoose.Schema({
  property: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Property",
    required: true,
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Owner",
    required: true,
  },
  tenant: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Tenant", 
    required: true,
  },
  inviteType: {
    type: String,
    enum: ["rental_interest", "tenancy_request", "application_submission"],
    default: "rental_interest",
  },
  message: {
    type: String,
    required: true,
    trim: true,
  },
  status: {
    type: String,
    enum: ["pending", "accepted", "declined", "expired"],
    default: "pending",
  },
  // Auto-generated message sent to owner
  autoGeneratedMessage: {
    type: String,
    default: "",
  },
  // Chat will be created when owner accepts the invite
  chat: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Chat",
    default: null,
  },
  // Track if owner has responded
  ownerResponse: {
    message: {
      type: String,
    },
    respondedAt: {
      type: Date,
    },
  },
  // Rental preferences proposed by tenant
  tenantPreferences: {
    proposedRent: {
      type: Number,
    },
    preferredMoveInDate: {
      type: Date,
    },
    leaseDurationPreference: {
      type: String, // e.g., "12 months", "6 months"
    },
    additionalRequests: {
      type: String,
    },
  },
  // Tenant's application data
  applicationData: {
    monthlyIncome: {
      type: Number,
    },
    employmentStatus: {
      type: String,
    },
    creditScore: {
      type: Number,
    },
    references: [{
      name: String,
      contact: String,
      relationship: String,
    }],
    pets: {
      type: Boolean,
      default: false,
    },
    petDetails: {
      type: String,
    },
  },
  // Notification status
  isNotificationSent: {
    type: Boolean,
    default: false,
  },
  // Expiry date for invite (auto-expire after 7 days)
  expiresAt: {
    type: Date,
    default: function() {
      return new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days from now
    },
  },
  // Related property inquiry that led to this invite
  relatedInquiry: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "PropertyInquiry",
    default: null,
  },
}, {
  timestamps: true,
});

// Add indexes for better performance
TenantInviteSchema.index({ property: 1 });
TenantInviteSchema.index({ owner: 1 });
TenantInviteSchema.index({ tenant: 1 });
TenantInviteSchema.index({ status: 1 });
TenantInviteSchema.index({ expiresAt: 1 });
TenantInviteSchema.index({ createdAt: -1 });

// Instance method to auto-expire invite
TenantInviteSchema.methods.checkAndExpire = function() {
  if (this.expiresAt && new Date() > this.expiresAt && this.status === 'pending') {
    this.status = 'expired';
    return this.save();
  }
  return Promise.resolve(this);
};

// Instance method to generate auto message for owner
TenantInviteSchema.methods.generateAutoMessage = function() {
  const tenantName = this.tenant.fullName || 'A tenant';
  const propertyTitle = this.property.title || 'your property';
  const propertyAddress = this.property.address || 'the property';
  
  let autoMessage = `🏠 **TENANT APPLICATION**\n\n`;
  autoMessage += `${tenantName} is interested in renting ${propertyTitle}.\n\n`;
  
  if (this.tenantPreferences.proposedRent) {
    autoMessage += `💰 **Proposed Rent**: $${this.tenantPreferences.proposedRent}/month\n`;
  }
  
  if (this.tenantPreferences.preferredMoveInDate) {
    const moveInDate = new Date(this.tenantPreferences.preferredMoveInDate).toLocaleDateString();
    autoMessage += `📅 **Preferred Move-in Date**: ${moveInDate}\n`;
  }
  
  if (this.tenantPreferences.leaseDurationPreference) {
    autoMessage += `⏱️ **Lease Duration**: ${this.tenantPreferences.leaseDurationPreference}\n`;
  }
  
  if (this.applicationData.monthlyIncome) {
    autoMessage += `💼 **Monthly Income**: $${this.applicationData.monthlyIncome}\n`;
  }
  
  if (this.applicationData.employmentStatus) {
    autoMessage += `👔 **Employment**: ${this.applicationData.employmentStatus}\n`;
  }
  
  autoMessage += `\n📋 **Property**: ${propertyTitle}\n`;
  autoMessage += `📍 **Location**: ${propertyAddress}`;
  
  return autoMessage;
};

// Instance method to accept tenant invite and create chat
TenantInviteSchema.methods.acceptInvite = function(responseMessage) {
  return new Promise(async (resolve, reject) => {
    try {
      // Update invite status
      this.status = 'accepted';
      this.ownerResponse = {
        message: responseMessage || '',
        respondedAt: new Date()
      };
      
      // Find or create chat between owner and tenant
      const Chat = require('./Chat');
      let chat = await Chat.findOne({
        participants: { $all: [this.owner, this.tenant] },
        isGroupChat: false
      });
      
      if (!chat) {
        chat = new Chat({
          participants: [this.owner, this.tenant],
          isGroupChat: false,
          lastActivity: new Date()
        });
        await chat.save();
      }
      
      // Link chat to invite
      this.chat = chat._id;
      await this.save();
      
      resolve(chat);
    } catch (error) {
      reject(error);
    }
  });
};

// Instance method to decline tenant invite
TenantInviteSchema.methods.declineInvite = function(responseMessage) {
  return new Promise(async (resolve, reject) => {
    try {
      this.status = 'declined';
      this.ownerResponse = {
        message: responseMessage || '',
        respondedAt: new Date()
      };
      
      await this.save();
      resolve(this);
    } catch (error) {
      reject(error);
    }
  });
};

// Static method to expire old invites
TenantInviteSchema.statics.expireOldInvites = function() {
  return this.updateMany(
    {
      status: 'pending',
      expiresAt: { $lt: new Date() }
    },
    {
      $set: { status: 'expired' }
    }
  );
};

module.exports = mongoose.model("TenantInvite", TenantInviteSchema);