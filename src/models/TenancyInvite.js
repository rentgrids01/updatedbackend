const mongoose = require("mongoose");

const TenancyInviteSchema = new mongoose.Schema({
  property: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Property",
    required: true,
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Owner",
    required: true,
  },
  tenant: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Tenant", 
    required: true,
  },
  inviteType: {
    type: String,
    enum: ["tenancy_offer", "visit_invitation", "rental_proposal"],
    default: "tenancy_offer",
  },
  message: {
    type: String,
    required: true,
    trim: true,
  },
  status: {
    type: String,
    enum: ["pending", "accepted", "declined", "expired"],
    default: "pending",
  },
  // Auto-generated message sent to tenant
  autoGeneratedMessage: {
    type: String,
    default: "",
  },
  // Chat will be created when tenant accepts the invite
  chat: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Chat",
    default: null,
  },
  // Track if tenant has responded
  tenantResponse: {
    message: {
      type: String,
    },
    respondedAt: {
      type: Date,
    },
  },
  // Rental terms offered by owner
  rentalTerms: {
    monthlyRent: {
      type: Number,
    },
    securityDeposit: {
      type: Number,
    },
    leaseDuration: {
      type: String, // e.g., "12 months", "6 months"
    },
    moveInDate: {
      type: Date,
    },
    additionalTerms: {
      type: String,
    },
  },
  // Notification status
  isNotificationSent: {
    type: Boolean,
    default: false,
  },
  // Expiry date for invite (auto-expire after 7 days)
  expiresAt: {
    type: Date,
    default: function() {
      return new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days from now
    },
  },
  // Related visit request or inquiry that led to this invite
  relatedInquiry: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "PropertyInquiry",
    default: null,
  },
}, {
  timestamps: true,
});

// Add indexes for better performance
TenancyInviteSchema.index({ property: 1 });
TenancyInviteSchema.index({ owner: 1 });
TenancyInviteSchema.index({ tenant: 1 });
TenancyInviteSchema.index({ status: 1 });
TenancyInviteSchema.index({ expiresAt: 1 });
TenancyInviteSchema.index({ createdAt: -1 });

// Virtual to check if invite is expired
TenancyInviteSchema.virtual('isExpired').get(function() {
  return this.expiresAt && new Date() > this.expiresAt;
});

// Instance method to generate auto message
TenancyInviteSchema.methods.generateAutoMessage = function() {
  const ownerName = this.owner.fullName || "Property Owner";
  const propertyTitle = this.property.title || "Property";
  
  let autoMessage = "";
  
  switch (this.inviteType) {
    case "tenancy_offer":
      autoMessage = `🏠 Tenancy Offer from ${ownerName}\n\n` +
                   `You've been invited to rent "${propertyTitle}"!\n\n` +
                   `Owner's Message: ${this.message}\n\n` +
                   `Please review the offer and respond with Accept or Decline.\n` +
                   `Once accepted, we'll create a direct chat for further discussion.`;
      break;
      
    case "visit_invitation":
      autoMessage = `🏠 Property Visit Invitation from ${ownerName}\n\n` +
                   `You're invited to visit "${propertyTitle}"!\n\n` +
                   `Owner's Message: ${this.message}\n\n` +
                   `Please respond to schedule your visit.`;
      break;
      
    case "rental_proposal":
      autoMessage = `🏠 Rental Proposal from ${ownerName}\n\n` +
                   `${ownerName} has a rental proposal for "${propertyTitle}"!\n\n` +
                   `Details: ${this.message}\n\n` +
                   `Please review and respond to this proposal.`;
      break;
      
    default:
      autoMessage = `🏠 Invitation from ${ownerName}\n\n` +
                   `You have received an invitation regarding "${propertyTitle}".\n\n` +
                   `Message: ${this.message}`;
  }
  
  // Add rental terms if provided
  if (this.rentalTerms && this.rentalTerms.monthlyRent) {
    autoMessage += `\n\n💰 Rental Terms:`;
    if (this.rentalTerms.monthlyRent) autoMessage += `\n• Monthly Rent: ₹${this.rentalTerms.monthlyRent}`;
    if (this.rentalTerms.securityDeposit) autoMessage += `\n• Security Deposit: ₹${this.rentalTerms.securityDeposit}`;
    if (this.rentalTerms.leaseDuration) autoMessage += `\n• Lease Duration: ${this.rentalTerms.leaseDuration}`;
    if (this.rentalTerms.moveInDate) autoMessage += `\n• Move-in Date: ${this.rentalTerms.moveInDate.toDateString()}`;
  }
  
  this.autoGeneratedMessage = autoMessage;
  return autoMessage;
};

// Instance method to accept invite and create chat
TenancyInviteSchema.methods.acceptInvite = async function(tenantResponseMessage = '') {
  const Chat = require('./Chat');
  
  // Check current status
  if (this.status === 'accepted') {
    throw new Error('Invite has already been accepted');
  }
  
  if (this.status === 'declined') {
    throw new Error('Cannot accept an invite that has already been declined');
  }
  
  if (this.status === 'expired') {
    throw new Error('Cannot accept an expired invite');
  }
  
  if (this.status !== 'pending') {
    throw new Error(`Cannot accept invite with status: ${this.status}`);
  }
  
  // Check if expired by date
  if (this.expiresAt && new Date() > this.expiresAt) {
    this.status = 'expired';
    await this.save();
    throw new Error('Invite has expired and cannot be accepted');
  }
  
  // Extract ObjectIds from potentially populated fields
  const tenantId = this.tenant._id || this.tenant;
  const ownerId = this.owner._id || this.owner;
  
  // Validate that we have valid ObjectIds
  if (!tenantId || !ownerId) {
    throw new Error('Invalid tenant or owner ID');
  }
  
  // Create chat between tenant and owner
  const chat = await Chat.findOrCreateChat(tenantId, ownerId);
  
  // Update invite status
  this.status = 'accepted';
  this.chat = chat._id;
  this.tenantResponse = {
    message: tenantResponseMessage,
    respondedAt: new Date(),
  };
  
  await this.save();
  return chat;
};

// Instance method to decline invite
TenancyInviteSchema.methods.declineInvite = async function(tenantResponseMessage = '') {
  // Check current status
  if (this.status === 'declined') {
    throw new Error('Invite has already been declined');
  }
  
  if (this.status === 'accepted') {
    throw new Error('Cannot decline an invite that has already been accepted');
  }
  
  if (this.status === 'expired') {
    throw new Error('Cannot decline an expired invite');
  }
  
  if (this.status !== 'pending') {
    throw new Error(`Cannot decline invite with status: ${this.status}`);
  }
  
  // Check if expired by date
  if (this.expiresAt && new Date() > this.expiresAt) {
    this.status = 'expired';
    await this.save();
    throw new Error('Invite has expired and cannot be declined');
  }
  
  this.status = 'declined';
  this.tenantResponse = {
    message: tenantResponseMessage,
    respondedAt: new Date(),
  };
  
  await this.save();
  return this;
};

// Static method to get pending invites for a tenant
TenancyInviteSchema.statics.getPendingInvitesForTenant = function(tenantId) {
  return this.find({
    tenant: tenantId,
    status: 'pending',
    expiresAt: { $gt: new Date() }
  })
  .populate('property', 'title propertyType monthlyRent images propertyId address')
  .populate('owner', 'fullName profilePhoto phonenumber')
  .sort({ createdAt: -1 });
};

// Static method to get invites sent by owner
TenancyInviteSchema.statics.getInvitesByOwner = function(ownerId) {
  return this.find({
    owner: ownerId
  })
  .populate('property', 'title propertyType monthlyRent images propertyId')
  .populate('tenant', 'fullName profilePhoto phonenumber')
  .sort({ createdAt: -1 });
};

// Static method to expire old invites
TenancyInviteSchema.statics.expireOldInvites = async function() {
  const result = await this.updateMany(
    {
      status: 'pending',
      expiresAt: { $lte: new Date() }
    },
    {
      status: 'expired'
    }
  );
  return result;
};

module.exports = mongoose.model("TenancyInvite", TenancyInviteSchema);