{
  "info": {
    "name": "RentGrid WhatsApp-like Chat System APIs",
    "description": "Complete collection of chat, message, and user presence APIs for WhatsApp-like functionality with real-time Socket.IO integration.\n\n## Real-Time Features:\n- **Auto Message Delivery**: Messages are automatically delivered to all participants via Socket.IO\n- **Room Management**: Users automatically join chat rooms and receive real-time updates\n- **Typing Indicators**: See when users are typing in real-time\n- **Online/Offline Status**: Track user presence across chats\n- **Message Acknowledgments**: Confirm message delivery to connected clients\n\n## Socket.IO Events:\n- `newMessage`: Real-time message delivery with full sender details\n- `user-typing` / `user-stop-typing`: Typing indicators\n- `user-joined-chat` / `user-left-chat`: Chat presence\n- `user-status-change`: Online/offline status\n- `message-read-by`: Read receipts\n\n## Authentication:\nInclude JWT token in Socket.IO auth: `{ auth: { token: 'your-jwt-token' } }`",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:7000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login API"
    },
    {
      "key": "targetUserId",
      "value": "",
      "type": "string",
      "description": "Valid ObjectId of target user (Tenant or Owner)"
    },
    {
      "key": "chatId",
      "value": "",
      "type": "string",
      "description": "Valid ObjectId of a chat"
    },
    {
      "key": "messageId",
      "value": "",
      "type": "string",
      "description": "Valid ObjectId of a message"
    }
  ],
  "item": [
    {
      "name": "Chats",
      "description": "Chat management APIs",
      "item": [
        {
          "name": "Get All Chats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat",
              "host": ["{{baseUrl}}"],
              "path": ["chat"]
            }
          },
          "response": []
        },
        {
          "name": "Access/Create Chat",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{targetUserId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/access",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "access"]
            }
          },
          "response": []
        },
        {
          "name": "Get Single Chat Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Group Chat",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Group Name\",\n  \"users\": [\"USER_ID_1\", \"USER_ID_2\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/group",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "group"]
            }
          },
          "response": []
        },
        {
          "name": "Search Chats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/search?query=search_term",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "search_term"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chats with Unread Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/unread",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "unread"]
            }
          },
          "response": []
        },
        {
          "name": "Mark Chat as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId/read",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId", "read"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mute Chat",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"duration\": 24\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId/mute",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId", "mute"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unmute Chat",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId/unmute",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId", "unmute"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Archive Chat",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId/archive",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId", "archive"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unarchive Chat",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId/unarchive",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId", "unarchive"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Chat",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/:chatId",
              "host": ["{{baseUrl}}"],
              "path": ["chat", ":chatId"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Contacts",
      "description": "Contact APIs for managing WhatsApp-like contact list with chat information",
      "item": [
        {
          "name": "Get Contacts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chats/contacts",
              "host": ["{{baseUrl}}"],
              "path": ["chats", "contacts"]
            },
            "description": "Get all possible chat partners with WhatsApp-like sorting. Returns contacts sorted by latest chat activity (most recent first), with contacts having existing chats at the top. Includes full URLs for profile photos and media files."
          },
          "response": [
            {
              "name": "Success Response",
              "status": "OK",
              "code": 200,
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"_id\": \"64b8f7e1a1b2c3d4e5f67892\",\n      \"fullName\": \"John Doe\",\n      \"phonenumber\": \"+1234567890\",\n      \"profilePhoto\": \"/uploads/avatars/profile_1234567890.jpg\",\n      \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_1234567890.jpg\",\n      \"userType\": \"tenant\",\n      \"chat\": {\n        \"_id\": \"64b8f7e1a1b2c3d4e5f67891\",\n        \"isGroupChat\": false,\n        \"lastActivity\": \"2023-07-20T10:32:00.000Z\",\n        \"unreadCount\": 2,\n        \"lastMessage\": {\n          \"_id\": \"64b8f7e1a1b2c3d4e5f67893\",\n          \"messageType\": \"text\",\n          \"content\": \"Hello! Are you available to view the property tomorrow?\",\n          \"sender\": {\n            \"_id\": \"64b8f7e1a1b2c3d4e5f67892\",\n            \"fullName\": \"John Doe\",\n            \"phonenumber\": \"+1234567890\",\n            \"profilePhoto\": \"/uploads/avatars/profile_1234567890.jpg\",\n            \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_1234567890.jpg\",\n            \"userType\": \"tenant\"\n          },\n          \"createdAt\": \"2023-07-20T10:32:00.000Z\"\n        }\n      }\n    },\n    {\n      \"_id\": \"64b8f7e1a1b2c3d4e5f67894\",\n      \"fullName\": \"Jane Smith\",\n      \"phonenumber\": \"+0987654321\",\n      \"profilePhoto\": \"/uploads/avatars/profile_0987654321.jpg\",\n      \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_0987654321.jpg\",\n      \"userType\": \"owner\",\n      \"chat\": {\n        \"_id\": \"64b8f7e1a1b2c3d4e5f67895\",\n        \"isGroupChat\": false,\n        \"lastActivity\": \"2023-07-20T09:15:00.000Z\",\n        \"unreadCount\": 0,\n        \"lastMessage\": {\n          \"_id\": \"64b8f7e1a1b2c3d4e5f67896\",\n          \"messageType\": \"image\",\n          \"content\": \"\",\n          \"imageUrl\": \"/uploads/chat_images/image_1234567890.jpg\",\n          \"imageFullUrl\": \"http://localhost:7000/uploads/chat_images/image_1234567890.jpg\",\n          \"fileName\": \"property_photo.jpg\",\n          \"sender\": {\n            \"_id\": \"64b8f7e1a1b2c3d4e5f67894\",\n            \"fullName\": \"Jane Smith\",\n            \"phonenumber\": \"+0987654321\",\n            \"profilePhoto\": \"/uploads/avatars/profile_0987654321.jpg\",\n            \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_0987654321.jpg\",\n            \"userType\": \"owner\"\n          },\n          \"createdAt\": \"2023-07-20T09:15:00.000Z\"\n        }\n      }\n    },\n    {\n      \"_id\": \"64b8f7e1a1b2c3d4e5f67897\",\n      \"fullName\": \"Mike Johnson\",\n      \"phonenumber\": \"+1122334455\",\n      \"profilePhoto\": \"/uploads/avatars/profile_1122334455.jpg\",\n      \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_1122334455.jpg\",\n      \"userType\": \"owner\",\n      \"chat\": null\n    }\n  ]\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Messages",
      "description": "Message APIs for sending, receiving, and managing messages",
      "item": [
        {
          "name": "Send Text Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Hello, this is a text message!\",\n  \"chatId\": \"CHAT_ID_HERE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["messages"]
            }
          },
          "response": []
        },
        {
          "name": "Get Messages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/messages/:chatId",
              "host": ["{{baseUrl}}"],
              "path": ["messages", ":chatId"],
              "variable": [
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE"
                }
              ]
            },
            "description": "Get all messages for a specific chat. Returns all messages with enhanced sender details (including user type, phone number) and full URLs for all media files. Messages are sorted by creation time (oldest first)."
          },
          "response": [
            {
              "name": "Success Response",
              "status": "OK",
              "code": 200,
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"messages\": [\n      {\n        \"_id\": \"64b8f7e1a1b2c3d4e5f67890\",\n        \"chat\": \"64b8f7e1a1b2c3d4e5f67891\",\n        \"sender\": {\n          \"_id\": \"64b8f7e1a1b2c3d4e5f67892\",\n          \"fullName\": \"John Doe\",\n          \"phonenumber\": \"+1234567890\",\n          \"profilePhoto\": \"/uploads/avatars/profile_1234567890.jpg\",\n          \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_1234567890.jpg\",\n          \"userType\": \"tenant\"\n        },\n        \"messageType\": \"text\",\n        \"content\": \"Hello! How are you?\",\n        \"readBy\": [],\n        \"isEdited\": false,\n        \"isDeleted\": false,\n        \"createdAt\": \"2023-07-20T10:30:00.000Z\",\n        \"updatedAt\": \"2023-07-20T10:30:00.000Z\"\n      },\n      {\n        \"_id\": \"64b8f7e1a1b2c3d4e5f67893\",\n        \"chat\": \"64b8f7e1a1b2c3d4e5f67891\",\n        \"sender\": {\n          \"_id\": \"64b8f7e1a1b2c3d4e5f67894\",\n          \"fullName\": \"Jane Smith\",\n          \"phonenumber\": \"+0987654321\",\n          \"profilePhoto\": \"/uploads/avatars/profile_0987654321.jpg\",\n          \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/profile_0987654321.jpg\",\n          \"userType\": \"owner\"\n        },\n        \"messageType\": \"image\",\n        \"content\": \"\",\n        \"imageUrl\": \"/uploads/chat_images/image_1234567890.jpg\",\n        \"imageFullUrl\": \"http://localhost:7000/uploads/chat_images/image_1234567890.jpg\",\n        \"fileName\": \"property_photo.jpg\",\n        \"fileSize\": 245760,\n        \"fileMimeType\": \"image/jpeg\",\n        \"readBy\": [],\n        \"isEdited\": false,\n        \"isDeleted\": false,\n        \"createdAt\": \"2023-07-20T10:32:00.000Z\",\n        \"updatedAt\": \"2023-07-20T10:32:00.000Z\"\n      }\n    ],\n    \"totalMessages\": 2\n  }\n}"
            }
          ]
        },
        {
          "name": "Send Photo Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/messages/photo",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "photo"]
            }
          },
          "response": []
        },
        {
          "name": "Send Video Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "video",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/messages/video",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "video"]
            }
          },
          "response": []
        },
        {
          "name": "Send Document Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "document",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/messages/document",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "document"]
            }
          },
          "response": []
        },
        {
          "name": "Send Audio Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "audio",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "chatId",
                  "value": "CHAT_ID_HERE",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/messages/audio",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "audio"]
            }
          },
          "response": []
        },
        {
          "name": "Send Location Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatId\": \"CHAT_ID_HERE\",\n  \"lat\": 40.7128,\n  \"lng\": -74.0060,\n  \"address\": \"New York, NY, USA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages/location",
              "host": ["{{baseUrl}}"],
              "path": ["messages", "location"]
            }
          },
          "response": []
        },
        {
          "name": "Edit Message",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Edited message content\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messages/:messageId/edit",
              "host": ["{{baseUrl}}"],
              "path": ["messages", ":messageId", "edit"],
              "variable": [
                {
                  "key": "messageId",
                  "value": "MESSAGE_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Forward Message",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/messages/:messageId/forward/:chatId",
              "host": ["{{baseUrl}}"],
              "path": ["messages", ":messageId", "forward", ":chatId"],
              "variable": [
                {
                  "key": "messageId",
                  "value": "SOURCE_MESSAGE_ID"
                },
                {
                  "key": "chatId",
                  "value": "TARGET_CHAT_ID"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Message",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/messages/:messageId",
              "host": ["{{baseUrl}}"],
              "path": ["messages", ":messageId"],
              "variable": [
                {
                  "key": "messageId",
                  "value": "MESSAGE_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Media File",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/messages/:messageId/file",
              "host": ["{{baseUrl}}"],
              "path": ["messages", ":messageId", "file"],
              "variable": [
                {
                  "key": "messageId",
                  "value": "MESSAGE_ID_HERE"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Presence",
      "description": "User online status, last seen, and typing indicators",
      "item": [
        {
          "name": "Get User Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/status",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":userId", "status"],
              "variable": [
                {
                  "key": "userId",
                  "value": "USER_ID_HERE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Set Typing Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isTyping\": true,\n  \"chatId\": \"CHAT_ID_HERE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/typing",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":userId", "typing"],
              "variable": [
                {
                  "key": "userId",
                  "value": "YOUR_USER_ID"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Online Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isOnline\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/online",
              "host": ["{{baseUrl}}"],
              "path": ["users", ":userId", "online"],
              "variable": [
                {
                  "key": "userId",
                  "value": "YOUR_USER_ID"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript"
      }
    },
    {
      "name": "Real-Time Socket.IO Events",
      "description": "Documentation for Socket.IO real-time messaging events and client implementation",
      "item": [
        {
          "name": "Socket.IO Client Setup",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/socket-docs",
              "host": ["{{baseUrl}}"],
              "path": ["socket-docs"]
            },
            "description": "## Complete Real-Time Messaging Implementation Guide\n\n### 🚀 1. Connect to Socket with Authentication\n```javascript\nconst io = require('socket.io-client');\nconst socket = io('http://localhost:7000', {\n  auth: {\n    token: 'YOUR_JWT_TOKEN_HERE'\n  }\n});\n\n// Listen for connection confirmation\nsocket.on('connection-confirmed', (data) => {\n  console.log('Connected as:', data);\n});\n```\n\n### 🔧 2. Auto-Join All User Chats\n```javascript\nsocket.on('connect', () => {\n  console.log('Connected to server');\n  \n  // CRITICAL: Auto-join all user's chats for message delivery\n  socket.emit('join-user-chats', (response) => {\n    console.log('✅ Joined chats:', response);\n    // response.chatIds contains all joined chat rooms\n  });\n});\n\n// Listen for auto-join trigger from server\nsocket.on('auto-join-chats', () => {\n  socket.emit('join-user-chats');\n});\n```\n\n### 📨 3. Listen for Real-Time Messages (CRITICAL)\n```javascript\nsocket.on('newMessage', (message) => {\n  console.log('📨 New message received:', message);\n  \n  // Message includes:\n  // - Full sender details (name, phone, photo, userType)\n  // - Media URLs (imageFullUrl, videoFullUrl, etc.)\n  // - Message metadata (timestamps, type, etc.)\n  \n  // Update chat UI immediately\n  appendMessageToChat(message.chat, message);\n});\n```\n\n### 🏃‍♂️ 4. Join Specific Chat (When Opening Chat)\n```javascript\nfunction openChat(chatId) {\n  socket.emit('join-chat', chatId, (response) => {\n    if (response.success) {\n      console.log(`✅ Joined chat ${chatId}:`, response);\n      // response.roomSize shows how many users are in the chat\n    } else {\n      console.error('❌ Failed to join chat:', response.message);\n    }\n  });\n}\n```\n\n### 📞 5. Listen for Message Delivery Confirmation\n```javascript\nsocket.on('messageDelivered', (data) => {\n  console.log('✅ Message delivered:', data);\n  // Update UI to show message as delivered\n  updateMessageStatus(data.messageId, 'delivered');\n});\n```\n\n### 📱 6. Real-Time Contact Updates\n```javascript\nsocket.on('contactUpdated', (contact) => {\n  console.log('📱 Contact updated:', contact);\n  updateContactInList(contact);\n});\n\nfunction updateContactInList(updatedContact) {\n  const index = contacts.findIndex(c => c._id === updatedContact._id);\n  if (index !== -1) {\n    contacts[index] = updatedContact;\n    // Re-sort by lastActivity (WhatsApp style)\n    contacts.sort((a, b) => {\n      const aTime = a.chat?.lastActivity || new Date(0);\n      const bTime = b.chat?.lastActivity || new Date(0);\n      return new Date(bTime) - new Date(aTime);\n    });\n    renderContactsList(contacts);\n  }\n}\n```\n\n### ⌨️ 7. Typing Indicators\n```javascript\n// Send typing indicator\nfunction startTyping(chatId) {\n  socket.emit('typing', { chatId }, (ack) => {\n    console.log('Typing indicator sent:', ack);\n  });\n}\n\n// Stop typing\nfunction stopTyping(chatId) {\n  socket.emit('stop-typing', { chatId });\n}\n\n// Listen for typing from others\nsocket.on('user-typing', (data) => {\n  showTypingIndicator(data.chatId, data.fullName);\n});\n\nsocket.on('user-stop-typing', (data) => {\n  hideTypingIndicator(data.chatId, data.userId);\n});\n```\n\n### 👥 8. User Presence\n```javascript\nsocket.on('user-joined-chat', (data) => {\n  console.log(`${data.fullName} joined the chat`);\n  updateUserPresence(data.userId, 'online');\n});\n\nsocket.on('user-left-chat', (data) => {\n  console.log(`${data.fullName} left the chat`);\n});\n\nsocket.on('user-status-change', (data) => {\n  updateUserPresence(data.userId, data.status);\n});\n```\n\n### 🐛 9. Debugging Socket Issues\n```javascript\n// Debug room information\nsocket.emit('debug-rooms', (debugInfo) => {\n  console.log('🐛 Debug info:', debugInfo);\n  // Shows: rooms joined, room sizes, socket info\n});\n\n// Monitor connection status\nsocket.on('disconnect', (reason) => {\n  console.log('❌ Disconnected:', reason);\n});\n\nsocket.on('connect_error', (error) => {\n  console.error('❌ Connection error:', error);\n});\n\n// Test message delivery\nfunction testMessageDelivery(chatId) {\n  console.log('🧪 Testing message delivery for chat:', chatId);\n  \n  // Check if in room\n  socket.emit('debug-rooms', (info) => {\n    const inRoom = info.userRooms.includes(chatId);\n    console.log(`In chat room ${chatId}:`, inRoom);\n    \n    if (!inRoom) {\n      console.log('⚠️ Not in room! Joining...');\n      socket.emit('join-chat', chatId);\n    }\n  });\n}\n```\n\n### 🔄 10. Complete Workflow\n```javascript\n// 1. Initialize socket connection\nconst socket = initializeSocket();\n\n// 2. Load initial data\nloadContactsList();\n\n// 3. Set up real-time listeners\nsetupSocketListeners();\n\n// 4. When user opens a chat\nfunction openChat(chatId) {\n  // Join the specific chat room\n  socket.emit('join-chat', chatId);\n  \n  // Load chat messages\n  fetch(`/api/messages/${chatId}`)\n    .then(res => res.json())\n    .then(data => {\n      renderMessages(data.data.messages);\n    });\n}\n\n// 5. When user sends a message\nfunction sendMessage(chatId, content) {\n  // Send via API (which triggers socket emission)\n  fetch('/api/messages', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ chatId, content })\n  })\n  .then(res => res.json())\n  .then(data => {\n    // Message will be received via socket 'newMessage' event\n    console.log('Message sent, waiting for socket confirmation...');\n  });\n}\n```\n\n### ❗ Critical Points for Real-Time Messaging:\n1. **Always join chat rooms** using `join-chat` event\n2. **Listen for `newMessage`** - this delivers real-time messages\n3. **Use `messageDelivered`** for delivery confirmation\n4. **Auto-join all chats** on connection for background notifications\n5. **Check room membership** if messages aren't being received\n6. **Use debugging tools** to troubleshoot room issues"
          },
          "response": [
            {
              "name": "Socket Events Reference",
              "status": "OK",
              "code": 200,
              "body": "{\n  \"socketEvents\": {\n    \"outgoing\": {\n      \"join-user-chats\": \"Auto-join all user's existing chats (CRITICAL for message delivery)\",\n      \"join-chat\": \"Join a specific chat room when opening chat\",\n      \"leave-chat\": \"Leave a specific chat room\",\n      \"typing\": \"Send typing indicator to chat participants\",\n      \"stop-typing\": \"Stop typing indicator\",\n      \"message-read\": \"Send read receipt for a message\",\n      \"user-online\": \"Broadcast online status to all chats\",\n      \"refresh-contacts\": \"Request contact list refresh acknowledgment\",\n      \"debug-rooms\": \"Get debugging info about joined rooms and socket state\"\n    },\n    \"incoming\": {\n      \"connection-confirmed\": \"Socket connection confirmation with user details\",\n      \"auto-join-chats\": \"Server trigger to auto-join all chats\",\n      \"newMessage\": \"Real-time message delivery with full populated details\",\n      \"messageDelivered\": \"Confirmation that message was delivered to recipients\",\n      \"contactUpdated\": \"Real-time contact updates with latest message and activity\",\n      \"user-typing\": \"Someone is typing in a chat\",\n      \"user-stop-typing\": \"Someone stopped typing\",\n      \"user-joined-chat\": \"User joined/opened a specific chat\",\n      \"user-left-chat\": \"User left a specific chat\",\n      \"user-status-change\": \"Online/offline status changes\",\n      \"message-read-by\": \"Message read receipts from other users\"\n    }\n  },\n  \"messageFormat\": {\n    \"newMessage\": {\n      \"_id\": \"messageId\",\n      \"chat\": \"chatId\",\n      \"sender\": {\n        \"_id\": \"senderId\",\n        \"fullName\": \"User Name\",\n        \"phonenumber\": \"+1234567890\",\n        \"profilePhoto\": \"/uploads/avatars/photo.jpg\",\n        \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/photo.jpg\",\n        \"userType\": \"tenant|owner\"\n      },\n      \"messageType\": \"text|image|video|audio|document|location\",\n      \"content\": \"Message content\",\n      \"imageFullUrl\": \"Full URL for images\",\n      \"videoFullUrl\": \"Full URL for videos\",\n      \"audioFullUrl\": \"Full URL for audio\",\n      \"documentFullUrl\": \"Full URL for documents\",\n      \"isEdited\": false,\n      \"isDeleted\": false,\n      \"readBy\": [],\n      \"isReadByCurrentUser\": false,\n      \"createdAt\": \"2023-07-20T10:30:00.000Z\",\n      \"updatedAt\": \"2023-07-20T10:30:00.000Z\"\n    },\n    \"messageDelivered\": {\n      \"messageId\": \"64b8f7e1a1b2c3d4e5f67890\",\n      \"chatId\": \"64b8f7e1a1b2c3d4e5f67891\",\n      \"deliveredTo\": 2,\n      \"timestamp\": \"2023-07-20T10:30:00.000Z\"\n    },\n    \"contactUpdated\": {\n      \"_id\": \"contactUserId\",\n      \"fullName\": \"Contact Name\",\n      \"phonenumber\": \"+1234567890\",\n      \"profilePhoto\": \"/uploads/avatars/contact.jpg\",\n      \"profilePhotoUrl\": \"http://localhost:7000/uploads/avatars/contact.jpg\",\n      \"userType\": \"tenant|owner\",\n      \"chat\": {\n        \"_id\": \"chatId\",\n        \"isGroupChat\": false,\n        \"lastActivity\": \"2023-07-20T10:30:00.000Z\",\n        \"unreadCount\": 2,\n        \"lastMessage\": {\n          \"_id\": \"messageId\",\n          \"messageType\": \"text\",\n          \"content\": \"Latest message content\",\n          \"sender\": {\n            \"_id\": \"senderId\",\n            \"fullName\": \"Sender Name\",\n            \"userType\": \"tenant|owner\"\n          },\n          \"createdAt\": \"2023-07-20T10:30:00.000Z\"\n        }\n      }\n    },\n    \"debugInfo\": {\n      \"socketId\": \"socket_abc123\",\n      \"userId\": \"user_xyz789\",\n      \"userRooms\": [\"userId\", \"chatId1\", \"chatId2\"],\n      \"roomSizes\": {\n        \"chatId1\": 2,\n        \"chatId2\": 1\n      },\n      \"totalConnectedSockets\": 5\n    }\n  },\n  \"troubleshooting\": {\n    \"messageNotReceived\": {\n      \"check1\": \"Verify user is in chat room using debug-rooms event\",\n      \"check2\": \"Ensure join-user-chats was called on connection\",\n      \"check3\": \"Check server logs for socket emission messages\",\n      \"check4\": \"Verify JWT token is valid and user is authenticated\"\n    },\n    \"deliveryNotConfirmed\": {\n      \"check1\": \"Listen for messageDelivered event\",\n      \"check2\": \"Check if receiver's socket is connected and in room\",\n      \"check3\": \"Verify acknowledgment callbacks are working\"\n    }\n  }\n}"
            }
          ]
        }
      ]
    }
  ]
}
